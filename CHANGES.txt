3.2.0

- renamed assert_smaller(_equal) to assert_lesser(_equal)
- added option to turn off exception handling (useful for debugging)
- better documentation

3.1.7

- removed obsolete options for doxyfile template
- restricted doxygen doc generation to header files

3.1.6

- fixed doxygen creation
- a bit of code clean-up

3.1.5

- improved shell scripts and better documentation
- removed VERSION.txt -> version.sh to be used instead
- made the examples more clear
- a bit of refactoring of libunittest internals

3.1.4

- ensured that the run scripts become executable after compiling tests 
    or examples
- adjusted install.sh: now it will create the install_directory 
    if it is not there yet 
- added check for proper epsilon and range bounds in assertions class

3.1.3

- added xml_escape() function to utilities
- use of xml_escape() in write_xml() function to make sure special
    characters are escaped properly
- added make_iso_timestamp() function to utilities
- added timestamp attribute to XML root tag
- extended unit tests
- refactored and simplified the examples
- renamed folder examples/complete to examples/standard
- added doxygen folder and Makefile to build doxygen documentation 
- made make_default_environment() inline to avoid linking problems
- adjusted run scripts for use on Linux and MacOS

3.1.2

- renamed formatting::_() to formatting::str() to be more explicit 
- added unit tests for formatting::str()

3.1.1

- moved utility functions from testcase class to utilities header
- moved assertions to assertions class
- testcase now inherits from assertions
- added virtual make_fail_message() so that the user can specify a
    custom fail message template 
- introduced a formatting class from which the assertions class derives
- a bit of refactoring and code doc

3.1.0

- improved make_default_environment() and argparser class
- safer smaller_equal and greater_equal assertions
- added private is_verbose() to the testsuite
- removed unnecessary explicit destructor from argparser
- use of shared_ptr instead of unique_ptr in pimplpattern to ensure
    copy and assignment work trivially
- added unit tests for copy and assignment to test_argparser 
- better documentation

3.0.3

- made all methods virtual in userargs class for consistency reasons
- added a version file

3.0.2

- added missing -fPIC argument to libunittest Makefile

3.0.1

- a few code improvements here and there

3.0.0

- libunittest is now to be compiled to a shared library
- introduced the private implementation idiom where ever appropriate
- added install.sh for easy build and installation
- updated README.txt with install information
- separated the code into logical sub-modules

2.5.0

- portable exit codes in argparser
- make_default_environment() now returns a portable, integral exit code
- make_default_environment() takes argc and argv now directly
- added unit tests to the release tar-ball
- changed assertion rule for approx. equal: Two values are now approx. equal
	if |a - b| < eps (instead of '<=') which leads to more consistent results 
- XML output is not generated by default anymore. Option '-x' lets you
	enable the XML generation
- moved run_all_tests() outside of the testsuite class for simplicity
- added option '-t' to the argparser to only run one specific test. This option
	supersedes option '-f' (name filter)  
- added virtual max_displayed_string_length() to the testcase class 
- added virtual max_displayed_value_precision() to the testcase class 
- renamed testcase::get_context() to testcase::get_test_context()
- removed unnecessary testcase::has_context() and testcase::print()
- removed testsuite::add_ostream(), all output is std::cout
- made the range assertions to check with excluding bounds for more
	consistent results
- lots of refactoring to make things more testable
- better doc

2.4.2

- improved error messages
- improved userargs class which can now be also instantiated by itself; 
	added virtual setters to userargs class 

2.4.1

- improved code style and doc

2.4.0

- added option of verbose output for running tests
- error info is now printed to screen at the end of the test runs
- improved the argparser concerning error handling
- simplified the Makefiles of the two examples

2.3.5

- renamed testsuite::run() to testsuite::run_all_tests() to be more explicit
- simplified the join_helper class

2.3.4

- improved and cleaned-up examples
- better README.txt

2.3.3

- added a function unittest::call() which is to be used to call test classes
	when implementing unittest::testsuite::run()
- added an overload of unittest::call() to pass the same test context
	through different test classes
- better code doc
- adjusted the examples

2.3.2

- safer and more consistent macro names: 
	UNITTEST_RUN, UNITTEST_RUNCXT, UNITTEST_SPOT

2.3.1

- added a simple helper macro 'ASSERTSPOT' which defines a string with info 
	about the current file name and the current line number which may be 
	used when making assertions (see example)

2.3.0

- added option to only run specific tests without recompiling
- added two helper macros: TESTRUN and TESTRUNCXT which make it easier
	and less error prone to add test runs
- removed testcase::set_class_name() and testcase::set_test_name() 
- added an argument parser to be used from main()
- added a 'skipped' status for tests that are registered but were not executed

2.2.1

- added more assertions such as assert_greater and assert_smaller
- added a minimal test example to the distribution
- added option to pass a different XML file name to 
	unittest::make_default_environment()

2.2.0

- a few drastic code changes to improve usability
- testresults and testlog are now pure data containers, not implementing
	any methods for simplicity
- added function write_xml() to write the test results to 
	an XML that can then be fed to some continuous integration system
- the name of the test class should now be set using testcase::set_class_name()
	similarly to testcase::set_test_name()
- the name of the optional test context is not tracked anymore for simplicity

2.1.2

- included a typedef in the static run() method of the example test cases
- a few code style improvements

2.1.1

- improved testcase::print() to accept an arbitrary number of arguments,
	similar to unittest::join
- renamed many private variables for better consistency
- simplified range-based for-loop in testsuite::print() using 'auto'
- improved the regex assertion messages
- simplified README.txt and added author information

2.1.0

- rewrote the assert_throw and assert_no_throw assertions; a custom fail
	message can now be passed consistent with all other assertions; the functor
	should now be passed using std::bind -> see example
- use of less error prone way to pass the assertion names to fail() by 
	using the locally predefined variable __func__

2.0.0

- testrun() does not accept the name of the test anymore -> instead the test 
	name should be passed for each test via new method testcase::set_test_name() 
	-> see doc and example for more info; note that __func__ in C++11 has become 
	   a standard, predefined variable valid for the local namespace 
- moved testcontext argument of testrun() to be the first argument passed
- simplified run_tests() methods in the example and renamed to run()
- use of explicit std::move semantics
- added print method to testcase which simply forwards to testsuite::print()
	-> print() can now be used within your testcase class without
	   using the testsuite explicitly

1.7.4

- added double-checking to testsuite::instance() for faster execution 
- added a nocontext class (instead of plain void) which is used as the 
	default type for the testcase template class

1.7.3

- added catch(...) in isolated_testrun() for exceptions that do not 
	inherit from std::exception
- testcase allocation on the stack now to ensure that memory is always
	released even in case of exceptions in set_up() or tear_down() (RAII)
	-> also leads to faster execution
- got rid of global version variable; version info still accessible through
	get_version_tuple() and get_version_string() 

1.7.2

- improved const-correctness
- better code doc

1.7.1

- added option to pass a custom fail message to almost all assert methods
- fixed bug in returning the name of the test context
- improved code doc
- added support for MacOSX in example Makefile
- adjusted README.txt concerning platform and compiler options

1.7.0

- added assertions for containers, regular expressions, and more
- added option to testsuite to control whether to stop after first failure
- improved assert_throw() and assert_no_throw() for easier usage
- some code refactoring
- better code doc

1.6.8

- improved assertion output

1.6.7

- code refactoring
- better code style and doc

1.6.6

- code clean-up 

1.6.5

- improved duration measurement

1.6.4

- got rid of unnecessary explicit copy constructor and explicit assignment 
	operator in classes testresult and testlog
- added section in README.txt mentioning which compilers were used to
	test the library
- added get_n_successes() to testresults class for consistency reasons
- added 'const' to context related methods in testcase class
- added explicit include of <memory>
- made sure that all *.txt files can be viewed on Windows 

1.6.3

- improved duration measurement
- made start_timing() and stop_timing() private in testsuite; no need
	to call them explicitly anymore
- renamed testresults::all_successful() to testresults::successful() for
	consistency reasons

1.6.2

- added testlog class which stores logging info about a single test 
- added get_testlogs() method to testresults class
- went from returning an error code to returning a boolean all over

1.6.1

- fixed example Makefile

1.6.0

- made code and especially the testsuite thread-safe. Calls to testrun() can
	now be done in parallel 
- improved the example in a way that main.cpp could be separated from the 
	test cases which are now defined in testcases.cpp
- replaced code in main() with high-level function: make_default_environment()
- the run() method in testsuite must now be implemented by the user
	and contain a list of test cases to run
- improved README.txt including a feature list
- added constant 'version' to the namespace unittest describing
	 the libunittest version
- added functions to get the libunittest version as tuple and string 
- better code doc

1.5.2

- simplified the example
- better doc

1.5.1

- improved code documentation
- some code re-organization

1.5.0

- Bug fix: implementations were not defined 'inline' which let to linking
	problems in some cases
- added class testresults storing the test results
- moved static variable instance_ into static instance() method of testsuite

1.4.4

- code clean-up and better doc

1.4.3

- added assertions for ranges
- better code organization
- better doc and README.txt

1.4.2

- added has_context() to testcase class
- code clean-up and better doc

1.4.1

- code clean-up
- better doc and examples
- more consistent suite->get_results()

1.4.0

- option to execute all tests within a certain context
- more consistent class names
- better documentation
- added much more comments in the example files

1.3.1

- improved README.txt
- better source code documentation

1.3.0

- libunittest is a single header file now
- dropped all non-standard statements
- got rid of unused includes
- got rid of last remaining macro printing the test name
- adjusted the testrun function
- the minimum unit of the duration measurement are seconds now
- better documentation

1.2.1

- better doc

1.2.0

- simplified testcase class
- better examples
- better doc

1.1.0

- better documentation
- bug fix in approx. equal comparisons
- more examples

1.0.0

- initial release
